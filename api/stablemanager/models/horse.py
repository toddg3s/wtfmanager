# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from typing import List, Dict
from ..util import deserialize_model


class Horse(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, registered_name: str=None, gender: str=None, birthdate: str=None, breed: str=None, color: str=None, comments: str=None):
        """
        Horse - a model defined in Swagger

        :param id: The id of this Horse.
        :type id: str
        :param name: The name of this Horse.
        :type name: str
        :param registered_name: The registered_name of this Horse.
        :type registered_name: str
        :param gender: The gender of this Horse.
        :type gender: str
        :param birthdate: The birthdate of this Horse.
        :type birthdate: str
        :param breed: The breed of this Horse.
        :type breed: str
        :param color: The color of this Horse.
        :type color: str
        :param comments: The comments of this Horse.
        :type comments: str
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'registered_name': str,
            'gender': str,
            'birthdate': str,
            'breed': str,
            'color': str,
            'comments': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'registered_name': 'registered_name',
            'gender': 'gender',
            'birthdate': 'birthdate',
            'breed': 'breed',
            'color': 'color',
            'comments': 'comments'
        }

        self._id = id
        self._name = name
        self._registered_name = registered_name
        self._gender = gender
        self._birthdate = birthdate
        self._breed = breed
        self._color = color
        self._comments = comments

    @classmethod
    def from_dict(cls, dikt) -> 'Horse':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Horse of this Horse.
        :rtype: Horse
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """
        Gets the id of this Horse.

        :return: The id of this Horse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """
        Sets the id of this Horse.

        :param id: The id of this Horse.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """
        Gets the name of this Horse.

        :return: The name of this Horse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Horse.

        :param name: The name of this Horse.
        :type name: str
        """

        self._name = name

    @property
    def registered_name(self) -> str:
        """
        Gets the registered_name of this Horse.

        :return: The registered_name of this Horse.
        :rtype: str
        """
        return self._registered_name

    @registered_name.setter
    def registered_name(self, registered_name: str):
        """
        Sets the registered_name of this Horse.

        :param registered_name: The registered_name of this Horse.
        :type registered_name: str
        """

        self._registered_name = registered_name

    @property
    def gender(self) -> str:
        """
        Gets the gender of this Horse.

        :return: The gender of this Horse.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender: str):
        """
        Sets the gender of this Horse.

        :param gender: The gender of this Horse.
        :type gender: str
        """
        allowed_values = ["stallion", "mare", "gelding"]
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def birthdate(self) -> str:
        """
        Gets the birthdate of this Horse.

        :return: The birthdate of this Horse.
        :rtype: str
        """
        return self._birthdate

    @birthdate.setter
    def birthdate(self, birthdate: str):
        """
        Sets the birthdate of this Horse.

        :param birthdate: The birthdate of this Horse.
        :type birthdate: str
        """

        self._birthdate = birthdate

    @property
    def breed(self) -> str:
        """
        Gets the breed of this Horse.

        :return: The breed of this Horse.
        :rtype: str
        """
        return self._breed

    @breed.setter
    def breed(self, breed: str):
        """
        Sets the breed of this Horse.

        :param breed: The breed of this Horse.
        :type breed: str
        """

        self._breed = breed

    @property
    def color(self) -> str:
        """
        Gets the color of this Horse.

        :return: The color of this Horse.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color: str):
        """
        Sets the color of this Horse.

        :param color: The color of this Horse.
        :type color: str
        """

        self._color = color

    @property
    def comments(self) -> str:
        """
        Gets the comments of this Horse.

        :return: The comments of this Horse.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments: str):
        """
        Sets the comments of this Horse.

        :param comments: The comments of this Horse.
        :type comments: str
        """

        self._comments = comments

