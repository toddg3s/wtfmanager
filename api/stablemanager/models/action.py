# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Action(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: str=None, person_id: str=None, horse_id: str=None, schedule_id: int=None, timestamp: datetime=None, summary: str=None, status: str=None, completed_by: str=None, tags: List[str]=None, price: float=None, comments: str=None):
        """
        Action - a model defined in Swagger

        :param id: The id of this Action.
        :type id: str
        :param person_id: The person_id of this Action.
        :type person_id: str
        :param horse_id: The horse_id of this Action.
        :type horse_id: str
        :param schedule_id: The schedule_id of this Action.
        :type schedule_id: int
        :param timestamp: The timestamp of this Action.
        :type timestamp: str
        :param summary: The summary of this Action.
        :type summary: str
        :param status: The status of this Action.
        :type status: str
        :param completed_by: The completed_by of this Action.
        :type completed_by: str
        :param tags: The tags of this Action.
        :type tags: List[str]
        :param price: The price of this Action.
        :type price: float
        :param comments: The comments of this Action.
        :type comments: str
        """
        self.swagger_types = {
            'id': str,
            'person_id': str,
            'horse_id': str,
            'schedule_id': int,
            'timestamp': str,
            'summary': str,
            'status': str,
            'completed_by': str,
            'tags': List[str],
            'price': float,
            'comments': str
        }

        self.attribute_map = {
            'id': 'id',
            'person_id': 'person_id',
            'horse_id': 'horse_id',
            'schedule_id': 'schedule_id',
            'timestamp': 'timestamp',
            'summary': 'summary',
            'status': 'status',
            'completed_by': 'completed_by',
            'tags': 'tags',
            'price': 'price',
            'comments': 'comments'
        }

        self._id = id
        self._person_id = person_id
        self._horse_id = horse_id
        self._schedule_id = schedule_id
        self._timestamp = timestamp
        self._summary = summary
        self._status = status
        self._completed_by = completed_by
        self._tags = tags
        self._price = price
        self._comments = comments

    @classmethod
    def from_dict(cls, dikt) -> 'Action':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Action of this Action.
        :rtype: Action
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """
        Gets the id of this Action.

        :return: The id of this Action.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """
        Sets the id of this Action.

        :param id: The id of this Action.
        :type id: str
        """

        self._id = id

    @property
    def person_id(self) -> str:
        """
        Gets the person_id of this Action.

        :return: The person_id of this Action.
        :rtype: str
        """
        return self._person_id

    @person_id.setter
    def person_id(self, person_id: str):
        """
        Sets the person_id of this Action.

        :param person_id: The person_id of this Action.
        :type person_id: str
        """

        self._person_id = person_id

    @property
    def horse_id(self) -> str:
        """
        Gets the horse_id of this Action.

        :return: The horse_id of this Action.
        :rtype: str
        """
        return self._horse_id

    @horse_id.setter
    def horse_id(self, horse_id: str):
        """
        Sets the horse_id of this Action.

        :param horse_id: The horse_id of this Action.
        :type horse_id: str
        """

        self._horse_id = horse_id

    @property
    def schedule_id(self) -> int:
        """
        Gets the schedule_id of this Action.

        :return: The schedule_id of this Action.
        :rtype: int
        """
        return self._schedule_id

    @schedule_id.setter
    def schedule_id(self, schedule_id: int):
        """
        Sets the schedule_id of this Action.

        :param schedule_id: The schedule_id of this Action.
        :type schedule_id: int
        """

        self._schedule_id = schedule_id

    @property
    def timestamp(self) -> str:
        """
        Gets the timestamp of this Action.

        :return: The timestamp of this Action.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: str):
        """
        Sets the timestamp of this Action.

        :param timestamp: The timestamp of this Action.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def summary(self) -> str:
        """
        Gets the summary of this Action.

        :return: The summary of this Action.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary: str):
        """
        Sets the summary of this Action.

        :param summary: The summary of this Action.
        :type summary: str
        """

        self._summary = summary

    @property
    def status(self) -> str:
        """
        Gets the status of this Action.

        :return: The status of this Action.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """
        Sets the status of this Action.

        :param status: The status of this Action.
        :type status: str
        """
        allowed_values = ["open", "incomplete", "complete", "cancelled"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def completed_by(self) -> str:
        """
        Gets the completed_by of this Action.

        :return: The completed_by of this Action.
        :rtype: str
        """
        return self._completed_by

    @completed_by.setter
    def completed_by(self, completed_by: str):
        """
        Sets the completed_by of this Action.

        :param completed_by: The completed_by of this Action.
        :type completed_by: str
        """

        self._completed_by = completed_by

    @property
    def tags(self) -> List[str]:
        """
        Gets the tags of this Action.

        :return: The tags of this Action.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """
        Sets the tags of this Action.

        :param tags: The tags of this Action.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def price(self) -> float:
        """
        Gets the price of this Action.

        :return: The price of this Action.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """
        Sets the price of this Action.

        :param price: The price of this Action.
        :type price: float
        """

        self._price = price

    @property
    def comments(self) -> str:
        """
        Gets the comments of this Action.

        :return: The comments of this Action.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments: str):
        """
        Sets the comments of this Action.

        :param comments: The comments of this Action.
        :type comments: str
        """

        self._comments = comments

