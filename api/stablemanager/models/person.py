# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Person(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, phone: str=None, email: str=None, address: str=None, tags: List[str]=None):
        """
        Person - a model defined in Swagger

        :param id: The id of this Person.
        :type id: str
        :param name: The name of this Person.
        :type name: str
        :param phone: The phone of this Person.
        :type phone: str
        :param email: The email of this Person.
        :type email: str
        :param address: The address of this Person.
        :type address: str
        :param tags: The tags of this Person.
        :type tags: List[str]
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'phone': str,
            'email': str,
            'address': str,
            'tags': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'phone': 'phone',
            'email': 'email',
            'address': 'address',
            'tags': 'tags'
        }

        self._id = id
        self._name = name
        self._phone = phone
        self._email = email
        self._address = address
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'Person':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Person of this Person.
        :rtype: Person
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """
        Gets the id of this Person.

        :return: The id of this Person.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """
        Sets the id of this Person.

        :param id: The id of this Person.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """
        Gets the name of this Person.

        :return: The name of this Person.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Person.

        :param name: The name of this Person.
        :type name: str
        """

        self._name = name

    @property
    def phone(self) -> str:
        """
        Gets the phone of this Person.

        :return: The phone of this Person.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """
        Sets the phone of this Person.

        :param phone: The phone of this Person.
        :type phone: str
        """

        self._phone = phone

    @property
    def email(self) -> str:
        """
        Gets the email of this Person.

        :return: The email of this Person.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """
        Sets the email of this Person.

        :param email: The email of this Person.
        :type email: str
        """

        self._email = email

    @property
    def address(self) -> str:
        """
        Gets the address of this Person.

        :return: The address of this Person.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """
        Sets the address of this Person.

        :param address: The address of this Person.
        :type address: str
        """

        self._address = address

    @property
    def tags(self) -> List[str]:
        """
        Gets the tags of this Person.

        :return: The tags of this Person.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """
        Sets the tags of this Person.

        :param tags: The tags of this Person.
        :type tags: List[str]
        """

        self._tags = tags

