# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Association(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: str=None, horse_id: str=None, horse_name: str=None, person_id: str=None, person_name: str=None, type: str=None, comments: str=None):
        """
        Association - a model defined in Swagger

        :param id: The id of this Association.
        :type id: str
        :param horse_id: The horse_id of this Association.
        :type horse_id: str
        :param horse_name: The horse_name of this Association.
        :type horse_name: str
        :param person_id: The person_id of this Association.
        :type person_id: str
        :param person_name: The person_name of this Association.
        :type person_name: str
        :param type: The type of this Association.
        :type type: str
        :param comments: The comments of this Association.
        :type comments: str
        """
        self.swagger_types = {
            'id': str,
            'horse_id': str,
            'horse_name': str,
            'person_id': str,
            'person_name': str,
            'type': str,
            'comments': str
        }

        self.attribute_map = {
            'id': 'id',
            'horse_id': 'horse_id',
            'horse_name': 'horse_name',
            'person_id': 'person_id',
            'person_name': 'person_name',
            'type': 'type',
            'comments': 'comments'
        }

        self._id = id
        self._horse_id = horse_id
        self._horse_name = horse_name
        self._person_id = person_id
        self._person_name = person_name
        self._type = type
        self._comments = comments

    @classmethod
    def from_dict(cls, dikt) -> 'Association':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Association of this Association.
        :rtype: Association
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """
        Gets the id of this Association.

        :return: The id of this Association.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """
        Sets the id of this Association.

        :param id: The id of this Association.
        :type id: str
        """

        self._id = id

    @property
    def horse_id(self) -> str:
        """
        Gets the horse_id of this Association.

        :return: The horse_id of this Association.
        :rtype: str
        """
        return self._horse_id

    @horse_id.setter
    def horse_id(self, horse_id: str):
        """
        Sets the horse_id of this Association.

        :param horse_id: The horse_id of this Association.
        :type horse_id: str
        """

        self._horse_id = horse_id

    @property
    def horse_name(self) -> str:
        """
        Gets the horse_name of this Association.

        :return: The horse_name of this Association.
        :rtype: str
        """
        return self._horse_name

    @horse_name.setter
    def horse_name(self, horse_name: str):
        """
        Sets the horse_name of this Association.

        :param horse_name: The horse_name of this Association.
        :type horse_name: str
        """

        self._horse_name = horse_name

    @property
    def person_id(self) -> str:
        """
        Gets the person_id of this Association.

        :return: The person_id of this Association.
        :rtype: str
        """
        return self._person_id

    @person_id.setter
    def person_id(self, person_id: str):
        """
        Sets the person_id of this Association.

        :param person_id: The person_id of this Association.
        :type person_id: str
        """

        self._person_id = person_id

    @property
    def person_name(self) -> str:
        """
        Gets the person_name of this Association.

        :return: The person_name of this Association.
        :rtype: str
        """
        return self._person_name

    @person_name.setter
    def person_name(self, person_name: str):
        """
        Sets the person_name of this Association.

        :param person_name: The person_name of this Association.
        :type person_name: str
        """

        self._person_name = person_name

    @property
    def type(self) -> str:
        """
        Gets the type of this Association.

        :return: The type of this Association.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """
        Sets the type of this Association.

        :param type: The type of this Association.
        :type type: str
        """

        self._type = type

    @property
    def comments(self) -> str:
        """
        Gets the comments of this Association.

        :return: The comments of this Association.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments: str):
        """
        Sets the comments of this Association.

        :param comments: The comments of this Association.
        :type comments: str
        """

        self._comments = comments

